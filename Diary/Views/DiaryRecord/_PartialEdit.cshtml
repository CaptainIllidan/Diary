@model Diary.Models.Diary.DiaryRecord
<h4>Запись ежедневника</h4>
<hr />
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<div class="form-group">
    @Html.LabelFor(model => model.Theme, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Theme, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.StartDateTime, new { htmlAttributes = new { @class = "form-control", @id = "StartDateTime", @readonly="readonly" } })
        @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
    </div>
</div>

@if (ViewBag.type == Diary.Models.Diary.DiaryRecordType.Meeting.ToString() || ViewBag.type == Diary.Models.Diary.DiaryRecordType.Thing.ToString())
{
    <div class="form-group">
        @Html.LabelFor(model => (model as Diary.Models.Diary.DiaryRecordFinishable).EndDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => (model as Diary.Models.Diary.DiaryRecordFinishable).EndDateTime, new { htmlAttributes = new { @class = "form-control", @id = "EndDateTime", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => (model as Diary.Models.Diary.DiaryRecordFinishable).EndDateTime, "", new { @class = "text-danger" })
        </div>
    </div>
}

@if (ViewBag.type == Diary.Models.Diary.DiaryRecordType.Meeting.ToString())
{
    <div class="form-group">
        @Html.LabelFor(model => (model as Diary.Models.Diary.Meeting).Place, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => (model as Diary.Models.Diary.Meeting).Place, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => (model as Diary.Models.Diary.Meeting).Place, "", new { @class = "text-danger" })
        </div>
    </div>
}

<div class="form-group">
    @Html.LabelFor(model => model.IsDone, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="checkbox">
            @Html.EditorFor(model => model.IsDone)
            @Html.ValidationMessageFor(model => model.IsDone, "", new { @class = "text-danger" })
        </div>
    </div>
</div>


<script>
    $(function () {
        $.datepicker.setDefaults($.datepicker.regional['ru'])
        $("#StartDateTime, #EndDateTime").datetimepicker({
            dateFormat: 'dd.mm.yy',
            showSecond: false,
            showMillisec: false,
            showMicrosec: false,
            showTimezone: false,
            locale: 'ru'
        });
        //Для работы с DateTime используется moment.js по причине того, что в MVC 5 некорректно работает проверка соответсвия DateTime шаблону
        //и неудобной работой с кастомными атрибутами
        $.validator.methods.date = function (value, element) {
            return this.optional(element) || moment(value, "DD.MM.YYYY HH:mm", true).isValid();
        }
        jQuery.validator.addMethod("greaterThan",
            function (value, element, params) {

                if (!/Invalid|NaN/.test(moment(value, "DD.MM.YYYY HH:mm", true))) {
                    return moment(value, "DD.MM.YYYY HH:mm", true).isAfter(moment($(params).val(), "DD.MM.YYYY HH:mm", true));
                }

                return isNaN(value) && isNaN($(params).val())
                    || (Number(value) > Number($(params).val()));
            }, 'Дата и время окончания должны быть позже начала');
        $("#EndDateTime").rules('add', { greaterThan: "#StartDateTime" });
    });
</script>
