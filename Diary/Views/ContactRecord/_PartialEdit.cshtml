@model Diary.Models.Contacts.ContactRecord
<div class="form-group">
    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Patronymic, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Patronymic, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Patronymic, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control", @id = "datepicker", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
    </div>
</div>
@{
    //Возможность редактировать д
    if (Model.ID != 0)
    {
        <dd>
            <table class="table" id="jqGrid"></table>
            <div id="jpager"></div>
        </dd>
    }
}


<br />


<script>
    $(function () {
        $.datepicker.setDefaults($.datepicker.regional['ru'])
        $("#datepicker").datepicker({
            dateFormat: 'dd.mm.yy',
            changeMonth: true,
            changeYear: true
        });
        $.validator.methods.date = function (value, element) {
            return this.optional(element) || moment(value, "DD.MM.YYYY", true).isValid();
        }
        $("#jqGrid").jqGrid({
            url: "/ContactRecord/GetContactInformation?id=" + @Model.ID,
            mtype: "GET",
            datatype: "json",
            colNames: ['ID', 'Тип', 'Значение'],
            colModel: [
                { name: 'ID', index: 'ID', width: 30, editable: false, stype: 'text', sortable: false, hidden: true, key: true },
                {
                    name: 'ContactInformationType', index: 'ContactInformationType', align: 'center', editable: true, sortable: false, cellEdit: true,
                    edittype: 'select',
                    formatter: 'select',
                    editoptions: { value: getAllSelectOptions() }
                },
                { name: 'Value', index: 'Value', align: 'center', editable: true, sortable: false }
            ],
            rowNum: 10,
            rowList: [10, 20, 30],
            pager: '#jpager',
            caption: "Контактная информация",
            autowidth: true,
            viewrecords: true
        });
        $("#jqGrid").jqGrid('navGrid', '#jpager', {
            search: false,
            searchtext: "Поиск",
            refresh: false,
            add: true,
            del: true,
            edit: true,
            view: true,
            viewtext: "Смотреть",
            viewtitle: "Выбранная запись",
            addtext: "Добавить",
            edittext: "Изменить",
            deltext: "Удалить"
        },
            update("edit"),
            update("add"),
            update("del")
        );

        function update(act) {
            return {
                closeAfterAdd: true,
                height: 250,
                width: 400,
                closeAfterEdit: true,
                reloadAfterSubmit: true,
                drag: true,
                onclickSubmit: function (params) {
                    var list = $("#jqg");
                    var selectedRow = list.getGridParam("selrow");
                    rowData = list.getRowData(selectedRow);
                    if (act === "add")
                        params.url = '@Url.Action("Create", "ContactInformation", new { @contactRecordId = Model.ID })';
                    else if (act === "del")
                        params.url = '@Url.Action("Delete", "ContactInformation")';
                    else if (act === "edit")
                        params.url = '@Url.Action("Edit", "ContactInformation")';
                },
                afterSubmit: function (response, postdata) {
                    $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid')
                    return [true, "", 0]
                }
            };
        }

        function getAllSelectOptions() {
            var states = { '0': 'Телефон', '1': 'Email', '2': 'Skype', '3': 'Другое' };
            var values = null;
            $.ajax({
                async: false,
                type: 'GET',
                url: '/ContactInformation/GetContactInformationTypes',
                success: function (data) {
                    values = JSON.parse(data);
                }
            });
            return values;
        }
    });
</script>
